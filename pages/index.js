import Head from 'next/head'
import { Container, Grid, LinearProgress } from '@mui/material'
import { useEffect, useState } from 'react'
import BlogPostCard from '../components/BlogPostCard'
import { faker } from '@faker-js/faker';
import { ethers } from 'ethers';
import config from './config.json'
import NFT from './abis/NFT.json'
import Marketplace from './abis/Marketplace.json'
const Home = ({ account, setAccount }) => {

  const [nfts, setNfts] = useState([])
  const [loading, setloading] = useState(true)
  const [nft, setNft] = useState(null)
  const [marketPlace, setMarketPlace] = useState(null)
  const [POST, setPOST] = useState([])
  const [progressValue, setProgressValue] = useState(0)
  const loadBlockChainData = async () => {
    setProgressValue(20)
    const provider = new ethers.providers.Web3Provider(window.ethereum)
    const network = await provider.getNetwork()
    setProgressValue(40)
    const signer = provider.getSigner()
    const Nft = new ethers.Contract(config[network.chainId].NFT.address, NFT, signer)
    const market = new ethers.Contract(config[network.chainId].Marketplace.address, Marketplace, signer)
    setProgressValue(60)

    const itemCount = (await market.itemCount()).toString()
    const items = []
    for (let i = 1; i <= itemCount; i++) {

      const item = await market.items(i)
      setProgressValue(80)

      if (!item.sold && item.tokenId != 2) {
        const uri = await Nft.tokenURI(item.tokenId)
        const fetchData = await fetch(uri)
        const data = await fetchData.json()
        const totalPrice = (await market.getTotalPrice(item.itemId)).toString()

        items.push({
          tokenId:item.tokenId,
          totalPrice: totalPrice,
          itemId: item.itemId.toString(),
          seller: item.seller,
          name: data.name,
          description: data.description,
          image: `https://${data.image.slice(7, 66)}.ipfs.dweb.link/blob`
        })
      }
      setProgressValue(100)
    }
    console.log(items)
    setNfts(items)
    setNft(Nft)
    setMarketPlace(market)


    // console.log(itemCount)

    const accounts = await window.ethereum.request({ 'method': 'eth_requestAccounts' })
    const account = ethers.utils.getAddress(accounts[0])
    if (account) {
      setAccount(account)
    }
    setProgressValue(0)
    setloading(false)
  }

  useEffect(() => {
    loadBlockChainData()
  }, [])

  if (loading) return (
    <LinearProgress variant='determinate' value={progressValue} />
  )
  else return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Container>

        <Grid container spacing={3} sx={{ top: 10 }}>
          {
            nfts.map((post, index) => (
              <BlogPostCard key={post.itemId} nft={post} index={index} />
            ))
          }
        </Grid>
      </Container>

    </>
  )
}
export default Home